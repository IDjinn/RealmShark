plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

application {
    mainClass.set('realmshark.RealmShark')
}

ext {
    lwjglVersion = "3.3.1"
    jomlVersion = "1.10.5"
}

def lwjglNatives
switch (org.gradle.internal.os.OperatingSystem.current()) {
    case org.gradle.internal.os.OperatingSystem.MAC_OS:
        lwjglNatives = "natives-macos"
        break
    case org.gradle.internal.os.OperatingSystem.WINDOWS:
        lwjglNatives = "natives-windows"
        break
}

repositories {
    mavenCentral()
    maven { url = "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    implementation 'com.ardikars.pcap:pcap-spi:1.4.2'
    implementation 'com.ardikars.pcap:pcap-jdk7:1.4.2'
    implementation 'com.google.code.gson:gson:2.9.1'
    implementation 'com.google.flatbuffers:flatbuffers-java:23.5.26'
}

def buildVersionFile = file('build.version')
if (!buildVersionFile.exists()) {
    buildVersionFile.text = """\
build-type=RELEASE
version=1.0.0
"""
} else {
    def buildProperties = new Properties()
    buildVersionFile.withInputStream { stream ->
        buildProperties.load(stream)
    }
    if (!buildProperties.containsKey('build-type')) {
        buildProperties['build-type'] = 'RELEASE'
    }
    if (!buildProperties.containsKey('version')) {
        buildProperties['version'] = '1.0.0'
    }
    buildVersionFile.withOutputStream { stream ->
        buildProperties.store(stream, null)
    }
}

def buildProperties = new Properties()
buildVersionFile.withInputStream { stream ->
    buildProperties.load(stream)
}
def buildType = buildProperties['build-type']
def version = buildProperties['version']

def buildNumberFile = file('build.number')
def buildNumber = 0
if (!buildNumberFile.exists()) {
    buildNumberFile.text = '0'
} else {
    buildNumber = buildNumberFile.text.toInteger() + 1
}
buildNumberFile.text = buildNumber.toString()

def gitCommitHash = 'git rev-parse --short HEAD'.execute().text.trim()

tasks.withType(Jar) {
    manifest {
        attributes(
                'Main-Class': application.mainClass.get()
        )
    }
}

shadowJar {
    manifest {
        attributes 'Main-Class': application.mainClass.get()
    }
    archiveFileName = "${applicationName}-${version}-${buildType}-${buildNumber}-${gitCommitHash}.jar"
}
